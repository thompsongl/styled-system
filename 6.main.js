(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{138:function(e,n,a){"use strict";a.r(n),a.d(n,"name",function(){return p});var s=a(8),t=a.n(s),o=a(0),r=a.n(o),i=a(1),p="Responsive Styles";n.default=function(e){var n=e.components;t()(e,["components"]);return r.a.createElement(i.MDXTag,{name:"wrapper",components:n},r.a.createElement(i.MDXTag,{name:"h1",components:n,props:{id:"responsive-styles"}},"Responsive Styles"),r.a.createElement(i.MDXTag,{name:"p",components:n},"Often when working on responsive layouts, it's useful to adjust styles across a singular dimension â€“\nsuch as font-size, margin, padding, and width.\nInstead of manually managing media queries and adding nested style objects throughout a code base,\nstyled-system offers a convenient shorthand syntax for adding responsive styles with a mobile-first approach.\nWhile this syntax can seem odd at first, it can become a powerful way to manage responsive typography and layouts."),r.a.createElement(i.MDXTag,{name:"p",components:n},"All style utilities add props that accept arrays as values for mobile-first responsive styles."),r.a.createElement(i.MDXTag,{name:"pre",components:n},r.a.createElement(i.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"<Box\n  width={[\n    1,    // 100% below the smallest breakpoint\n    1/2,  // 50% from the next breakpoint and up\n    1/4   // 25% from the next breakpoint and up\n  ]}\n/>\n\n// responsive font size\n<Box fontSize={[ 1, 2, 3, 4 ]} />\n\n// responsive margin\n<Box m={[ 1, 2, 3, 4 ]} />\n\n// responsive padding\n<Box p={[ 1, 2, 3, 4 ]} />\n")))}}}]);
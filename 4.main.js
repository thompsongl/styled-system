(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{136:function(e,n,t){"use strict";t.r(n);var a=t(8),o=t.n(a),s=t(0),r=t.n(s),m=t(1);n.default=function(e){var n=e.components;o()(e,["components"]);return r.a.createElement(m.MDXTag,{name:"wrapper",components:n},r.a.createElement(m.MDXTag,{name:"h1",components:n,props:{id:"how-it-works"}},"How it Works"),r.a.createElement(m.MDXTag,{name:"p",components:n},"Most CSS-in-JS libraries accept functions as arguments to create dynamic styles based on props.\nFor example, the following sets color dynamically in styled-components based on the ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"color")," prop:"),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"import styled from 'styled-components'\n\nconst Box = styled.div`\n  color: ${props => props.color};\n`\n")),r.a.createElement(m.MDXTag,{name:"p",components:n},"Beyond just passing a dynamic value, an entire style declaration can be returned in functions like this."),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"import styled from 'styled-components'\n\nconst getColor = props => `color: ${props.color};`\n\nconst Box = styled.div`\n  ${getColor}\n`\n")),r.a.createElement(m.MDXTag,{name:"p",components:n},"Style object can also be returned, which is a much simpler way to handle dynamic values in JavaScript."),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"import styled from 'styled-components'\n\n// works exactly the same as the previous function\nconst getColor = props => ({\n  color: props.color\n})\n\nconst Box = styled.div`\n  ${getColor}\n`\n")),r.a.createElement(m.MDXTag,{name:"p",components:n},"By using style objects instead of embedded CSS strings, styled-system is compatible with other libraries,\nsuch as ",r.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/paypal/glamorous"}},"glamorous")," and ",r.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/emotion-js/emotion"}},"emotion"),"."),r.a.createElement(m.MDXTag,{name:"p",components:n},"The core utilities in styled-system are built on this pattern and consist of functions that take ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"props")," as an argument\nand return style objects,\nwhile making it simpler to use values from a theme and apply styles responsively across breakpoints."),r.a.createElement(m.MDXTag,{name:"p",components:n},"These style functions can be written on a one-off basis, but styled-system is meant to help reduce boilerplate, ensure a consistent styling API, and speed the development of React-based design systems."))}}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{140:function(e,n,t){"use strict";t.r(n);var a=t(8),o=t.n(a),s=t(0),r=t.n(s),c=t(1);n.default=function(e){var n=e.components;o()(e,["components"]);return r.a.createElement(c.MDXTag,{name:"wrapper",components:n},r.a.createElement(c.MDXTag,{name:"hr",components:n}),r.a.createElement(c.MDXTag,{name:"h2",components:n,props:{id:"ignore-true"}},"ignore: true"),r.a.createElement(c.MDXTag,{name:"h1",components:n,props:{id:"theming"}},"Theming"),r.a.createElement(c.MDXTag,{name:"p",components:n},r.a.createElement(c.MDXTag,{name:"em",components:n,parentName:"p"},"Taken from the previous readme")),r.a.createElement(c.MDXTag,{name:"p",components:n},"It's recommended to add objects and array scales to your theme to ensure consistent, constraint-based values are used throughout your app.\nAll theme values are optional, so use your own discretion when creating a theme.\nSee the ",r.a.createElement(c.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"#default-theme"}},"Default Theme")," section for a reference to the default fallback values."),r.a.createElement(c.MDXTag,{name:"pre",components:n},r.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"// theme.js\n\n// breakpoint values\n// any array length works with styled-system\nconst breakpoints = [\n  '40em', '52em', '64em'\n]\n\nconst colors = {\n  text: '#024',\n  blue: '#07c',\n  // nested objects work as well\n  dark: {\n    blue: '#058'\n  },\n  // arrays can be used for scales of colors\n  gray: [\n    '#333',\n    '#666',\n    '#999',\n    '#ccc',\n    '#eee',\n    '#f6f6f6',\n  ]\n}\n\n// space is used for margin and padding scales\n// it's recommended to use powers of two to ensure alignment\n// when used in nested elements\n// numbers are converted to px\nconst space = [\n  0, 4, 8, 16, 32, 64, 128, 256, 512\n]\n\n// typographic scale\nconst fontSizes = [\n  12, 14, 16, 20, 24, 32, 48, 64, 96, 128\n]\n\n// for any scale, either array or objects will work\nconst lineHeights = [\n  1, 1.125, 1.25, 1.5\n]\n\nconst fontWeights = {\n  normal: 500,\n  bold: 700\n}\n\nconst letterSpacings = {\n  normal: 'normal',\n  caps: '0.25em'\n}\n\n// border-radius\nconst radii = [\n  0, 2, 4, 8\n]\n\nconst borders = [\n  0, '1px solid', '2px solid'\n]\n\nconst shadows = [\n  `0 1px 2px 0 ${colors.text}`,\n  `0 1px 4px 0 ${colors.text}`\n]\n\nconst theme = {\n  breakpoints,\n  colors,\n  space,\n  fontSizes,\n  lineHeights,\n  fontWeights,\n  letterSpacings,\n  radii,\n  borders,\n  shadows,\n}\n\nexport default theme\n")))}}}]);